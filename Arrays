Array Data Structure:
    why we need array?
    *To reduce the complexity.
    *It is store the number of items which it amount is not fixed. and it accessed using the indexes which is startes with 0.
    *An array data structure is used to store the group of same type of element under the single variable.
    *Array elements are stored in contiguous Memory:
        5    23   65   75
        ^    ^     ^    ^
        x   x+y   x+2y  x+4y

       x-> Address where array is started.
       y-> size of on array element.
       explain:
        *if the first element store in the address of the 1000 and the size of on the array element is constant like y=4.
        *Then the second element stored in the 1004,1008,1012 based on the x+y,x+2y,x+3y.
    *Ramdom Access:
        *Since the elements are stored in array in contiguous location we can access it in O(1) time complexity.By using the (x,x+y etc...).
        *Cache Friendliness: Array usually fitch the iterms in near by memory to prefetch the iterms in the near by locations.It store the array of the first element and the other elements also stored in some near by memory locations(Stored in contiguous Memory) for the fast access.
        *The other data structures(linked list,hash map,etc..) is not having the prefetching.
Types of Arrays:
    This classification size:
                    1. Fixed Sized Arrays.
                    2.Dynamic Sized Arrays.
    1.Fixed sized arrays:
        *The Size of the Arrays get fixed,you are not able the more values than the fixed size.
        *The Time complexity for the first element add in array is O(n) and for the end Theta(1) then the over all time complexity is O(n) for the fixed size array.
        ex: int [] arr =new int[100];
            int [] arr =new int[n];
            int [] arr={1,6,8,9};
            *In java the arrays are heap memory allocated.
            Finding the largest element in the Array:
                ex: 
                            class Test{
                                    static int getLargest(int arr[])
                                    {
                                        int n = arr.length;
                                        for (int i = 0; i < n; i++)
                                        {
                                            boolean flag = true;
                                            for (int j = 0; j < n; j++)
                                            {
                                                if (arr[j] > arr[i])
                                                {
                                                    flag = false;
                                                    break;
                                                }
                                            }
                                            if (flag == true)
                                                return i;
                                        }
                                        return -1;
                                    }

                                    public static void main(String[] args)
                                    {
                                        int arr[] = {5, 8, 20, 10};
                                        System.out.println(getLargest(arr));
                                    }
                                }

    2.Dynamic Sized Arrays:
        *The Size of the Arrays get Changed dynamically based on the no.of inputs.
        *we can give more inputs the size is not fixed.
            c++:vector,java:Arraylist,Python:list.
        *If we initialize the array of the 100 size if we enter the 101 element then the size of an array gets double it has 200 for 201 it became 400.
        *The Time complexity for the first element add in array is O(1) and for the n+1 element is Theta(n) finally the Timecomplexity is O(1) for the dyanmic size array.
        *For every time doubling the size the old array get copied into the new array and the memory allocation for the old array is deleted or cleared.
        *Many built in operations are carried in this dynamic array like removing etc...

ArrayList in Java:
    Syntax:
        ArrayList<Integer>al=new ArrayList<Integer>();
    *You can add ore items it can internally resized him self.
    *It Contains rich library functions like add,remove,present or not etc...
        ex:     import java.util.ArrayList;
                    class Test {
                        public static void main(String args[]) {
                            ArrayList<Integer> al = new ArrayList<Integer>();
                            al.add(10);
                            al.add(20);
                            al.add(30);
                            System.out.println(al);
                        }
                    }
    *We can use it has an normal array by mentioning the size of an array inside ().In that way we can use normal array then we can using the built in functions in arraylist.
    *In another way we can create the array in the another containers like create the array in the Hash map we can use the built in functions in the Hashmap.
1.Finding the Largest Element:
    code:
            int getLargest(int arr[], int n) {
                int largest = 0;  // assume first element is largest

                for (int i = 1; i < n; i++) 
                {
                    if (arr[i] > arr[largest]) 
                    {
                        largest = i;
                    }
                }

                return largest;
            }

2.Finding the Second Largest Element:
    code: 
            int secondLargest(int arr[], int n){
                int res = -1, largest = 0;
                for (int i = 1; i < n; i++)
                {
                    if (arr[i] > arr[largest])
                    {
                        res = largest;
                        largest = i;
                    }
                    else if (arr[i] != arr[largest])
                    {
                        if (res == -1 || arr[i] > arr[res])
                            res = i;
                    }
                }
                return res;
            }

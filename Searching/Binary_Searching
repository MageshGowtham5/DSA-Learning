Binary Search:
    Sorted Array: Binary search only works on sorted arrays or lists. Unsorted inputs give undefined results.
    Duplicate Values: If duplicates exist, the returned index depends on the implementation (e.g., it may return the first or any occurrence).
    Efficient: Binary search is efficient for a large dataset if the given input is sorted. Always refer to binary search over sequential search.

    Binary Search Algorithm in Java
    Below is the Algorithm designed for Binary Search:

    1.Start
    2.Take input array and Target
    3.Initialise start = 0 and end = (array size -1)
    4.Intialise mid variable
    5.mid = (start+end)/2
    6.if array[ mid ] == target then return mid
    7.if array[ mid ] < target then start = mid+1
    8.if array[ mid ] > target then end = mid-1
    9.if start<=end then goto step 5
    10.return -1 as target not found
    11.Exit

Methods for Java Binary Search
There are three methods in Java to implement Binary Search in Java are mentioned below:

    1.Iterative Method
    2.Recursive Method
    3.Inbuild Method

1. Iterative Method for Binary Search  in Java:

        // Java implementation of iterative Binary Search
        class Geeks
        {
        static int binarySearch(int a[], int l, int r, int x)
            {
                while (l <= r) {
                    int m = (l + r) / 2;

                    // Index of Element Returned
                    if (a[m] == x) {
                        return m;

                    // If element is smaller than mid, then
                    // it can only be present in left subarray
                    // so we decrease our r pointer to mid - 1 
                    } else if (a[m] > x) {
                        r = m - 1;

                    // Else the element can only be present
                    // in right subarray
                    // so we increase our l pointer to mid + 1
                    } else {
                    l = m + 1;
                    }  
                }

                // No Element Found
                return -1;
            }

            public static void main(String args[])
            {

                int a[] = { 2, 3, 4, 10, 40 };
                int n = a.length;
                int x = 10;
            
                int res = binarySearch(a, 0, n - 1, x);

                System.out.println("Element to be searched is : "+ x); 

                if (res == -1)
                    System.out.println("Element is not present in array");
                else
                    System.out.println("Element is present at index: " + res);
            }
        }
    Output:
    Element to be searched is : 10
    Element is present at index: 3

2. Recursive Method for Binary Search:
      // Java implementation of
        // recursive Binary Search
        public class Geeks
        {
            static int binarySearch(int a[], int l, int r, int x)
            {

                if (r >= l) {
                    int m = l + (r - l) / 2;

                    // Returned Index of the Element
                    if (a[m] == x)
                        return m;

                    // If element is smaller than mid, then
                    // it can only be present in left subarray
                    if (a[m] > x)
                        return binarySearch(a, l, m - 1, x);

                    // Else the element can only be present
                    // in right subarray
                    return binarySearch(a, m + 1, r, x);
                }

                // No Element Found
                return -1;
            }

            // main function
            public static void main(String args[])
            {
                int a[] = { 2, 3, 4, 10, 40 };
                int n = a.length;
                int x = 10;
            
                int res = binarySearch(a, 0, n - 1, x);

            System.out.println("Element to be searched is : "+ x); 

                if (res == -1)
                    System.out.println(
                        "Element is not present in array");
                else
                    System.out.println("Element is present at index: " + res);
            }
        }  
    
    Output:
    Element to be searched is : 10
    Element is present at index: 3

3. In Build Method for Binary Search in Java:
    *Arrays.binarysearch()  works for arrays which can be of primitive data type also.

        // Java Program to demonstrate working of binarySearch()
        // Method of Arrays class In a sorted array
        import java.util.Arrays;

        public class Geeks
        {

            public static void main(String[] args)
            {
                int a[] = { 10, 20, 15, 22, 35 };

                // Sorting the above array
                // using sort() method of Arrays class
                Arrays.sort(a);

                int x = 22;
                
                int res = Arrays.binarySearch(a, x);
                
                System.out.println("Element to be searched is : "+ x);
                
                if (res >= 0)
                    System.out.println(x + " found at index = " + res);
                else
                    System.out.println(x + " Not found");

                x = 40;
                res = Arrays.binarySearch(a, x);
                
                System.out.println("Element to be searched is : "+ x);
                if (res >= 0)
                    System.out.println(x + " found at index = " + res);
                else
                    System.out.println(x + " Not found");
            }
        }
    Output
    Element to be searched is : 22
    22 found at index = 3
    Element to be searched is : 40
    40 Not found
Collections.binarysearch()  works for objects Collections like ArrayList and LinkedList. 